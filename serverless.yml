service: saeid-amn-simple-api-go
app: ${self:service}

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: provided.al2023
  apiName: ${self:service}
  endpointType: EDGE
  stage: ${opt:stage, 'dev'}
  region: ${env:REGION, 'us-east-1'}
  iam:
    role: ${env:IAM_ROLE}
    # Improve: need to solve user permission which is not authorized to perform: iam:TagRole.
    # role: LambdaRole
  environment:
    REGION: ${env:REGION, 'us-east-1'}
    ENDPOINT_URL: ${env:ENDPOINT_URL}
    ACCESS_KEY_ID: ${env:ACCESS_KEY_ID}
    SECRET_ACCESS_KEY: ${env:SECRET_ACCESS_KEY}
    DATABASE_TYPE: 'dynamodb'
    RUNNING_MODE: 'aws'
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}

functions:
  create:
    handler: main
    events:
      - http:
          path: /api/devices/
          method: post
# Improve: Add `handler.ListDevice` method.
#  list:
#    handler: main
#    events:
#      - http:
#          path: /api/devices/
#          method: get
  get:
    handler: main
    events:
      - http:
          path: /api/devices/{id}
          method: get
  update:
    handler: main
    events:
      - http:
          path: /api/devices/{id}
          method: put
  delete:
    handler: main
    events:
      - http:
          path: /api/devices/{id}
          method: delete

package:
  patterns:
    - '!/**'
    - bootstrap

resources:
  Resources:
    # Improve: need to solve user permission.
    # LambdaRole: ${file(./resource/LambdaRole.yml)}
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
